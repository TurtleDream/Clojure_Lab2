<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="4cabc072-e90f-4661-9e95-5dda7a64ed11" name="Default Changelist" comment="" />
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/lab2/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="102">
              <caret line="6" selection-start-line="6" selection-end-line="32" selection-end-column="6" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/lab2/core.2">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="476">
              <caret line="28" selection-start-line="28" selection-end-line="28" selection-end-column="44" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/lab2/lab2.3">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="782">
              <caret line="46" column="10" lean-forward="true" selection-start-line="46" selection-start-column="10" selection-end-line="46" selection-end-column="10" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/lab2/core.clj" />
        <option value="$PROJECT_DIR$/src/lab2/lab2.2" />
        <option value="$PROJECT_DIR$/src/lab2/core.2" />
        <option value="$PROJECT_DIR$/src/lab2/lab2.3" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="-8" />
    <option name="y" value="-8" />
    <option name="width" value="1382" />
    <option name="height" value="744" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="lab2" type="b2602c69:ProjectViewProjectNode" />
              <item name="lab2" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="lab2" type="b2602c69:ProjectViewProjectNode" />
              <item name="lab2" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="lab2" type="b2602c69:ProjectViewProjectNode" />
              <item name="lab2" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="lab2" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="lab2" type="b2602c69:ProjectViewProjectNode" />
              <item name="lab2" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1553229208492" />
    <property name="last_opened_file_path" value="$USER_HOME$/Desktop/123/lab3" />
    <property name="settings.editor.selected.configurable" value="configurable.group.language" />
  </component>
  <component name="ReplState" timestamp="1553230553326">{:repl-history {:ide [], :local [{:command &quot;(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))&quot;, :offset 854, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '( echo-chan 1 2 3 4 5 2 2 2 2 2 1))&quot;, :offset 57, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2 1 2))&quot;, :offset 48, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2 1 2 1))&quot;, :offset 50, :ns &quot;lab2.core&quot;} {:command &quot;\n(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    (recur n [])))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))&quot;, :offset 904, :ns &quot;lab2.core&quot;} {:command &quot;\n(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2 1))\n&quot;, :offset 47, :ns &quot;lab2.core&quot;} {:command &quot;\n(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))&quot;, :offset 892, :ns &quot;lab2.core&quot;} {:command &quot;(loo)\n(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))\n&quot;, :offset 50, :ns &quot;lab2.core&quot;} {:command &quot;(loo)\n(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 ))\n&quot;, :offset 49, :ns &quot;lab2.core&quot;} {:command &quot;\n(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 1))\n&quot;, :offset 45, :ns &quot;lab2.core&quot;} {:command &quot;\n(&gt;!! echo-chan 1)\n&quot;, :offset 18, :ns &quot;lab2.core&quot;} {:command &quot;\n(&gt;!! echo-chan 3)\n&quot;, :offset 18, :ns &quot;lab2.core&quot;} {:command &quot;\n(&gt;!! echo-chan 2)\n&quot;, :offset 18, :ns &quot;lab2.core&quot;} {:command &quot;(&gt;!! echo-chan 2)\n&quot;, :offset 18, :ns &quot;lab2.core&quot;} {:command &quot;(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))&quot;, :offset 942, :ns &quot;lab2.core&quot;} {:command &quot;(ns lab2.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout onto-chan]]))\n\n(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))\n(&gt;!! chan 1)\n(&gt;!! chan 1)&quot;, :offset 1154, :ns &quot;user&quot;} {:command &quot;(conj echo-chan 1)&quot;, :offset 18, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 1))&quot;, :offset 44, :ns &quot;lab2.core&quot;} {:command &quot;(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  (recur 0 [])\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    (recur 0 [])\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          ))\n(loo)&quot;, :offset 961, :ns &quot;lab2.core&quot;} {:command &quot;(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  (recur 0 [])\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    (recur 0 [])\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            (recur 0 [])\n                            )\n                          ))\n(loo)&quot;, :offset 1002, :ns &quot;lab2.core&quot;} {:command &quot;(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          ))\n(loo)&quot;, :offset 865, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))\n(&gt;!! echo-chan 1)\n(&gt;!! echo-chan 1)&quot;, :offset 80, :ns &quot;lab2.core&quot;} {:command &quot;(&gt;!! echo-chan 1)\n\n&quot;, :offset 19, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))\n\n&quot;, :offset 44, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2 1))\n\n&quot;, :offset 46, :ns &quot;lab2.core&quot;} {:command &quot;(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n\n&quot;, :offset 897, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2 3))\n\n&quot;, :offset 46, :ns &quot;lab2.core&quot;} {:command &quot;(ns lab2.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout onto-chan]]))\n\n(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))\n(&gt;!! echo-chan 1)\n(&gt;!! echo-chan 1)&quot;, :offset 1164, :ns &quot;user&quot;} {:command &quot;(&gt;!! echo-chan 1)\n(&gt;!! echo-chan 1)&quot;, :offset 35, :ns &quot;lab2.core&quot;} {:command &quot;(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    (recur n [])\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))\n(&gt;!! echo-chan 1)\n(&gt;!! echo-chan 1)&quot;, :offset 1027, :ns &quot;lab2.core&quot;} {:command &quot;(loo)&quot;, :offset 5, :ns &quot;lab2.core&quot;} {:command &quot;(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)&quot;, :offset 897, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2 1))&quot;, :offset 46, :ns &quot;lab2.core&quot;} {:command &quot;(&gt;! echo-chan 1)&quot;, :offset 16, :ns &quot;lab2.core&quot;} {:command &quot;(a/&gt;!! echo-chan 1)&quot;, :offset 19, :ns &quot;lab2.core&quot;} {:command &quot;(a/onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2 1))&quot;, :offset 48, :ns &quot;lab2.core&quot;} {:command &quot;\n  (defn echo-chan (onto-chan chan coll?))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          \n                          )\n&quot;, :offset 890, :ns &quot;lab2.core&quot;} {:command &quot;\n  (defn echo-chan (1 2 3 4 5))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          \n                          )\n&quot;, :offset 879, :ns &quot;lab2.core&quot;} {:command &quot;\n  (defn echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          \n                          )\n&quot;, :offset 874, :ns &quot;lab2.core&quot;} {:command &quot;\n  (onto-chan echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          \n                          )\n&quot;, :offset 879, :ns &quot;lab2.core&quot;} {:command &quot;\n  (defn echo-chan [chan])(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          \n                          )\n&quot;, :offset 874, :ns &quot;lab2.core&quot;} {:command &quot;\n  (def echo-chan ())(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          \n                          )\n&quot;, :offset 869, :ns &quot;lab2.core&quot;} {:command &quot;\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (println res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          \n                          )\n&quot;, :offset 873, :ns &quot;lab2.core&quot;} {:command &quot;(ns lab2.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout onto-chan]]))\n\n(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (print res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))\n(&gt;!! echo-chan 1)\n(&gt;!! echo-chan 1)\n&quot;, :offset 1162, :ns &quot;lab2.core&quot;} {:command &quot;\n\n(defn loo []\n  (def echo-chan (chan 100))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (print res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n\n&quot;, :offset 901, :ns &quot;lab2.core&quot;} {:command &quot;(loo)\n\n\n\n\n                          \n                          \n&quot;, :offset 5, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))\n\n\n\n\n                          \n                          \n&quot;, :offset 44, :ns &quot;lab2.core&quot;} {:command &quot;\n\n(defn loo []\n  (def echo-chan (chan 10))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (print res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n\n&quot;, :offset 900, :ns &quot;lab2.core&quot;} {:command &quot;\n\n(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (print res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n\n&quot;, :offset 897, :ns &quot;lab2.core&quot;} {:command &quot;\n\n(defn loo []\n  (def echo-chan (chan 1))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (print res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n\n&quot;, :offset 899, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2 1))\n\n\n\n\n                          \n                          \n&quot;, :offset 46, :ns &quot;lab2.core&quot;} {:command &quot;\n(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (print res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)\n\n\n\n\n                          \n                          \n&quot;, :offset 896, :ns &quot;lab2.core&quot;} {:command &quot;(ns lab2.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout onto-chan]]))\n(def echo-chan (chan))(go\n                        (loop[n 0 res []]\n                          (if (and (empty? res) (= n 0))\n                            (let [x (&lt;! echo-chan)]\n                              (if-not(nil? x)\n                                (recur x res)\n                                )\n                              )\n                            (if (or (empty? res) (&gt; n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not (nil? x)\n                                  (recur (dec n) (conj res x))\n                                  ))\n                              (do (print res)\n                                  (recur 0 []))\n                              )\n                            )\n                          )\n                        (loo)\n                        )&quot;, :offset 1020, :ns &quot;user&quot;} {:command &quot;(ns lab2.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout onto-chan]]))\n(def echo-chan (chan))(go\n                        (loop[n 0 res []]\n                          (if (and (empty? res) (= n 0))\n                            (let [x (&lt;! echo-chan)]\n                              (if-not(nil? x)\n                                (recur x res)\n                                )\n                              )\n                            (if (or (empty? res) (&gt; n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not (nil? x)\n                                  (recur (dec n) (conj res x))\n                                  ))\n                              (do (print res)\n                                  (recur 0 []))\n                              )\n                            )\n                          )\n                        )&quot;, :offset 990, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (let [x (&lt;! chan)]\n    (&gt;!! echo-chan x)))&quot;, :offset 62, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan chan '(1 2 3 4 5 2 2 2 2 2))&quot;, :offset 39, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan])(go\n                    (let [x (&lt;! chan)]\n                      (&gt;!! echo-chan x)))&quot;, :offset 102, :ns &quot;lab2.core&quot;} {:command &quot;(def ch (chan))&quot;, :offset 15, :ns &quot;lab2.core&quot;} {:command &quot;(&gt;!! echo-chan 1)&quot;, :offset 17, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (&gt;!! echo-chan (&lt;!! chan))\n  )&quot;, :offset 3} {:command &quot;(&gt;!! echo-chan 2)&quot;, :offset 17, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (print (&gt;!! echo-chan (&lt;!! chan)))\n  )&quot;, :offset 58, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n      (loop [chan]\n            (empty? chan)\n            (print (&gt;!! echo-chan (&lt;!! chan))))\n\n      )&quot;, :offset 119, :ns &quot;true&quot;} {:command &quot;(defn main [chan]\n      (loop [chan]\n            (let [x (&lt;! chan)]\n                 (if-not(nil? x)\n                        (do (print (&gt;!! echo-chan (&lt;!! chan))))\n                        (recur chan))\n                 )))&quot;, :offset 223, :ns &quot;true&quot;} {:command &quot;(defn main [chan]\n      (loop [chan (chan)]\n            (let [x (&lt;! chan)]\n                 (if-not(nil? x)\n                        (do (print (&gt;!! echo-chan (&lt;!! chan))))\n                        (recur chan))\n                 )))&quot;, :offset 230, :ns &quot;true&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop [chan (chan)]\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (print (&gt;!! echo-chan (&lt;!! chan))))\n          (recur chan))\n        ))))&quot;, :offset 183, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop [chan (chan)]\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (print (&gt;!! echo-chan x)))\n          (recur chan))\n        ))))&quot;, :offset 174, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (print (&gt;!! echo-chan x)))\n          (recur))\n        ))))&quot;, :offset 158, :ns &quot;lab2.core&quot;} {:command &quot;(ns lab2.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout onto-chan]]))\n(def echo-chan (chan))(go\n                        (loop[n 0 res []]\n                          (if (and (empty? res) (= n 0))\n                            (let [x (&lt;! echo-chan)]\n                              (if-not(nil? x)\n                                (recur x res)\n                                )\n                              )\n                            (if (or (empty? res) (&gt; n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not (nil? x)\n                                  (recur (dec n) (conj res x))\n                                  ))\n                              (do (print res)\n                                  (recur 0 []))\n                              )\n                            )\n                          )\n                        )\n(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (print (&gt;!! echo-chan x)))\n          (recur))\n        ))))&quot;, :offset 1149, :ns &quot;lab2.core&quot;} {:command &quot;(def ch (chan))\n(onto-chan ch '(1 2 3 4 5 2 2 2 2 2))&quot;, :offset 53, :ns &quot;lab2.core&quot;} {:command &quot;(def echo-chan (chan))(go\n                        (loop[n 0 res []]\n                          (if (and (empty? res) (= n 0))\n                            (let [x (&lt;! echo-chan)]\n                              (if-not(nil? x)\n                                (recur x res)\n                                )\n                              )\n                            (if (or (empty? res) (&gt; n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not (nil? x)\n                                  (recur (dec n) (conj res x))\n                                  ))\n                              (do (print res)\n                                  (recur 0 []))\n                              )\n                            )\n                          )\n                        )\n(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (println (&gt;!! echo-chan x)))\n          (recur))\n        ))))\n\n(def ch (chan))\n(onto-chan ch '(1 2 3 4 5 2 2 2 2 2))\n(main ch)&quot;, :offset 1031, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (println (&gt;!! echo-chan x)))\n          (recur []))\n        ))))&quot;, :offset 163, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (println (&gt;!! echo-chan x))\n              (recur))\n          )\n        ))))&quot;, :offset 175, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (println '(&gt;!! echo-chan x))\n              (recur []))\n          )\n        ))))&quot;, :offset 179, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (println (&gt;!! echo-chan x))\n              (recur []))\n          )\n        ))))&quot;, :offset 178, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (println '(&gt;!! echo-chan x))\n              (recur ))\n          )\n        ))))&quot;, :offset 177, :ns &quot;lab2.core&quot;} {:command &quot;(def echo-chan (chan))(go\n                        (loop[n 0 res []]\n                          (if (and (empty? res) (= n 0))\n                            (let [x (&lt;! echo-chan)]\n                              (if-not(nil? x)\n                                (recur x res)\n                                )\n                              )\n                            (if (or (empty? res) (&gt; n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not (nil? x)\n                                  (recur (dec n) (conj res x))\n                                  ))\n                              (do res\n                                  (recur 0 []))\n                              )\n                            )\n                          )\n                        )\n(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (println (&gt;!! echo-chan x))\n              (recur ))\n          )\n        ))))&quot;, :offset 974, :ns &quot;lab2.core&quot;} {:command &quot;(def echo-chan (chan))(go\n                        (loop[n 0 res []]\n                          (if (and (empty? res) (= n 0))\n                            (let [x (&lt;! echo-chan)]\n                              (if-not(nil? x)\n                                (recur x res)\n                                )\n                              )\n                            (if (or (empty? res) (&gt; n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not (nil? x)\n                                  (recur (dec n) (conj res x))\n                                  ))\n                              (do (print res)\n                                  (recur 0 []))\n                              )\n                            )\n                          )\n                        )\n(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (println (&gt;!! echo-chan x))\n              (recur ))\n          )\n        ))))&quot;, :offset 982, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do ((&gt;!! echo-chan x))\n              (recur ))\n          )\n        ))))&quot;, :offset 168, :ns &quot;lab2.core&quot;} {:command &quot;(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (&gt;!! echo-chan x)\n              (recur ))\n          )\n        ))))\n\n(def ch (chan))\n(onto-chan ch '(1 2 3 4 5 2 2 2 2 2))\n(main ch)&quot;, :offset 231, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan ch '(1 2 3 4 5 2 2 2 2 2))&quot;, :offset 37, :ns &quot;lab2.core&quot;} {:command &quot;(main ch)&quot;, :offset 9, :ns &quot;lab2.core&quot;} {:command &quot;\n(main ch)&quot;, :offset 10, :ns &quot;lab2.core&quot;} {:command &quot;\n(onto-chan ch '(1 2 3 4 5 2 2 2 2 2))\n(main ch)&quot;, :offset 48, :ns &quot;lab2.core&quot;} {:command &quot;(defn loo\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (print res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)&quot;, :offset 892, :ns &quot;lab2.core&quot;} {:command &quot;(ns lab2.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout onto-chan]]))\n\n(defn loo\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (print res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)&quot;, :offset 1078, :ns &quot;lab2.core&quot;} {:command &quot;(ns lab2.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout onto-chan]]))\n\n(defn loo []\n  (def echo-chan (chan))(go\n                          (loop[n 0 res []]\n                            (if (and (empty? res) (= n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not(nil? x)\n                                  (recur x res)\n                                  )\n                                )\n                              (if (or (empty? res) (&gt; n 0))\n                                (let [x (&lt;! echo-chan)]\n                                  (if-not (nil? x)\n                                    (recur (dec n) (conj res x))\n                                    ))\n                                (do (print res)\n                                    (recur 0 []))\n                                )\n                              )\n                            )\n                          (loo)\n                          ))\n(loo)&quot;, :offset 1081, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan echo-chan '(1 2 3 4 5 2 2 2 2 2))&quot;, :offset 44, :ns &quot;lab2.core&quot;} {:command &quot;(defn group [chan]\n  (go\n    (loop[n 0 res [] vec1 []]\n      (let [x (&lt;! chan)]\n        (if (and (empty? res) (= n 0))\n          (recur x res vec1)\n          (if (or (empty? res) (&gt; n 0))\n            (recur (dec n) (conj res x) vec1)\n            (if (nil? x)\n              (println (conj vec1 res))\n              (recur x [] (conj vec1 res))\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n\n(defn main\n  []\n  (let [chan (chan)]\n    (onto-chan chan '(3 4 0 2 1 2 2 4 5))\n    (group chan)\n    )\n  )\n(main)&quot;, :offset 525, :ns &quot;lab2.core&quot;} {:command &quot;(ns lab2.core\n  (:require [clojure.core.async\n             :as a\n             :refer [&gt;! &lt;! &gt;!! &lt;!! go chan buffer close! thread\n                     alts! alts!! timeout onto-chan]]))\n(def echo-chan (chan))(go\n                        (loop[n 0 res []]\n                          (if (and (empty? res) (= n 0))\n                            (let [x (&lt;! echo-chan)]\n                              (if-not(nil? x)\n                                (recur x res)\n                                )\n                              )\n                            (if (or (empty? res) (&gt; n 0))\n                              (let [x (&lt;! echo-chan)]\n                                (if-not (nil? x)\n                                  (recur (dec n) (conj res x))\n                                  ))\n                              (do (print res)\n                                  (recur 0 []))\n                              )\n                            )\n                          )\n                        )\n(defn main [chan]\n  (go\n    (loop []\n      (let [x (&lt;! chan)]\n        (if-not(nil? x)\n          (do (&gt;!! echo-chan x)\n              (recur ))\n          )\n        ))))\n\n(def ch (chan))\n(onto-chan ch '(1 2 3 4 5 2 2 2 2 2))\n(main ch)&quot;, :offset 1222, :ns &quot;lab2.core&quot;} {:command &quot;(def ch (chan))\n(onto-chan ch '(1 2 3 4 5 2 2 2 2 2 3))\n(main ch)&quot;, :offset 65, :ns &quot;lab2.core&quot;} {:command &quot;(def ch (chan))\n(onto-chan ch '(1 2 3 4 5 2 2 2 2 2))\n(main ch)&quot;, :offset 63, :ns &quot;lab2.core&quot;} {:command &quot;(def ch (chan))\n(onto-chan ch '(1))\n(main ch)&quot;, :offset 45, :ns &quot;lab2.core&quot;} {:command &quot;(def ch (chan))\n(onto-chan ch '(1 1 2 2 2 3 3 3 3 1))\n(main ch)&quot;, :offset 63, :ns &quot;lab2.core&quot;} {:command &quot;()&quot;, :offset 2, :ns &quot;lab2.core&quot;} {:command &quot;(go\n  (loop []\n    (let [x (&lt;! chan)]\n      (if-not(nil? x)\n        (do (&gt;!! echo-chan x)\n            (recur ))\n        )&quot;, :offset 121, :ns &quot;lab2.core&quot;} {:command &quot;(def chan1 (chan))\n(go\n  (loop []\n    (let [x (&lt;! chan)]\n      (if-not(nil? x)\n        (do (&gt;!! echo-chan x)\n            (recur ))\n        )\n      )))&quot;, :offset 150, :ns &quot;lab2.core&quot;} {:command &quot;(def chan1 (chan))\n(go\n  (loop []\n    (let [x (&lt;! chan1)]\n      (if-not(nil? x)\n        (do (&gt;!! echo-chan x)\n            (recur ))\n        )\n      )))&quot;, :offset 151, :ns &quot;lab2.core&quot;} {:command &quot;(onto-chan chan1 '(1 2 3 4 5 2 2 2 2 2))&quot;, :offset 40, :ns &quot;lab2.core&quot;} {:command &quot;90&quot;, :offset 2, :ns &quot;lab2.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="lab2" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="4cabc072-e90f-4661-9e95-5dda7a64ed11" name="Default Changelist" comment="" />
      <created>1552866979978</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1552866979978</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1382" height="744" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.27609682" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" weight="0.3289689" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="bottom" id="Messages" order="10" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info active="true" anchor="right" id="REPL" order="6" side_tool="true" visible="true" weight="0.35779122" />
      <window_info anchor="right" id="Leiningen" order="7" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" selection-start-line="7" selection-end-line="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/lab2/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="102">
          <caret line="6" selection-start-line="6" selection-end-line="32" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/lab2/core.2">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="476">
          <caret line="28" selection-start-line="28" selection-end-line="28" selection-end-column="44" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/lab2/lab2.3">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="782">
          <caret line="46" column="10" lean-forward="true" selection-start-line="46" selection-start-column="10" selection-end-line="46" selection-end-column="10" />
        </state>
      </provider>
    </entry>
  </component>
</project>